package com.machine.service;

import java.util.List;
import java.util.stream.Collectors;

import com.machine.Bean.MachinesBean;
import com.machine.repository.MachineRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class MachinesService {

    @Autowired
    private MachineRepository machineRepository;

    // 查詢所有機台
    public List<MachinesBean> findAllMachines() {
        return machineRepository.findAll();
    }

    // 依機台ID取得單筆資料
    public MachinesBean findMachineById(int machineId) {
        return machineRepository.findById(machineId).orElse(null);
    }

    public void insertMachine(MachinesBean machine) {
        if (machine.getMachineName() == null || machine.getMachineName().isEmpty()) {
            throw new IllegalArgumentException("機台名稱不可為空");
        }
        if (machine.getSerialNumber() == null || machine.getSerialNumber().isEmpty()) {
            throw new IllegalArgumentException("出廠編號不可為空");
        }
        
        // 檢查出廠編號是否已存在
        if (machineRepository.existsBySerialNumber(machine.getSerialNumber())) {
            throw new IllegalArgumentException("出廠編號已存在，請勿重複新增");
        }

        // 呼叫 Repository 寫入資料庫
        machineRepository.save(machine);
    }
    
    public void deleteMachine(int machineId) {
        // 先找出該機台
        MachinesBean machine = machineRepository.findById(machineId)
            .orElseThrow(() -> new IllegalArgumentException("找不到該機台資料，無法刪除"));
        
        // 檢查狀態，避免刪除運行中的機台
        if ("運行中".equals(machine.getMstatus())) {
            throw new IllegalStateException("運行中的機台不可刪除，請先停止機台");
        }
        
        // 通過檢查，執行刪除
        machineRepository.deleteById(machineId);
    }
    
    public void updateMachine(MachinesBean machine) {
        if (machine.getMachineName() == null || machine.getMachineName().isEmpty()) {
            throw new IllegalArgumentException("機台名稱不可為空");
        }
        if (machine.getSerialNumber() == null || machine.getSerialNumber().isEmpty()) {
            throw new IllegalArgumentException("出廠編號不可為空");
        }

        // 可選擇加檢查 serialNumber 是否重複（不包含自己）
        MachinesBean existing = machineRepository.findBySerialNumber(machine.getSerialNumber()).orElse(null);
        if (existing != null && existing.getMachineId() != machine.getMachineId()) {
            throw new IllegalArgumentException("出廠編號已存在，請勿重複");
        }

        machineRepository.save(machine);
    }
    
    // 新增搜尋功能
    public List<MachinesBean> searchMachines(String keyword, String statusFilter) {
        List<MachinesBean> machines = machineRepository.findAll();
        
        if (keyword != null && !keyword.trim().isEmpty()) {
            machines = machineRepository.searchByKeyword(keyword.trim());
        }
        
        if (statusFilter != null && !statusFilter.trim().isEmpty()) {
            machines = machines.stream()
                .filter(m -> m.getMstatus().equals(statusFilter))
                .collect(Collectors.toList());
        }
        
        return machines;
    }
}